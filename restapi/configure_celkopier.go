// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"time"

	units "github.com/docker/go-units"
	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/rs/xid"
	graceful "github.com/tylerb/graceful"

	"github.com/Magicking/celkopier/internal/logic"
	"github.com/Magicking/celkopier/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../docs/celkopier.yml

func configureFlags(api *operations.CelkopierAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.CelkopierAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// s.api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.MultipartformConsumer = runtime.DiscardConsumer

	api.JSONProducer = runtime.JSONProducer()

	api.ListScannedHandler = operations.ListScannedHandlerFunc(func(params operations.ListScannedParams) middleware.Responder {
		var ret []string

		root := "to_scan/"
		err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
			ret = append(ret, path)
			return nil
		})
		if err != nil {
			log.Println(err)
			return middleware.NotImplemented("TODO Error handling")
		}
		return operations.NewListScannedOK().WithPayload(ret)
	})
	api.ScanHandler = operations.ScanHandlerFunc(func(params operations.ScanParams) middleware.Responder {
		logic.DoScan("localhost:50051")
		return operations.NewScanOK()
	})
	api.UploadHandler = operations.UploadHandlerFunc(func(params operations.UploadParams) middleware.Responder {
		content, err := ioutil.ReadAll(params.Scanned)
		if err != nil {
			return middleware.NotImplemented("TODO Error handling")
		}
		name := fmt.Sprintf("to_scan/Scan_%s_%s.jpeg", time.Now().Format("2006-01-02_15_04_05"), xid.New().String())
		if err = ioutil.WriteFile(name, content, 0777); err != nil {
			return middleware.NotImplemented("TODO Error handling")
		}
		log.Printf("%s [%s] written to disk\n", name, units.HumanSize(float64(len(content))))
		return operations.NewUploadOK()
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
