// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kopier.proto

package kopier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScannerClient is the client API for Scanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScannerClient interface {
	Scan(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type scannerClient struct {
	cc *grpc.ClientConn
}

func NewScannerClient(cc *grpc.ClientConn) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) Scan(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kopier.Scanner/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerServer is the server API for Scanner service.
type ScannerServer interface {
	Scan(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterScannerServer(s *grpc.Server, srv ScannerServer) {
	s.RegisterService(&_Scanner_serviceDesc, srv)
}

func _Scanner_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kopier.Scanner/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServer).Scan(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kopier.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _Scanner_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kopier.proto",
}

func init() { proto.RegisterFile("kopier.proto", fileDescriptor_kopier_a0fbd462bf3803ce) }

var fileDescriptor_kopier_a0fbd462bf3803ce = []byte{
	// 102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xce, 0x2f, 0xc8,
	0x4c, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xa4, 0xd3, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xa2, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95,
	0x10, 0x45, 0x46, 0xce, 0x5c, 0xec, 0xc1, 0xc9, 0x89, 0x79, 0x79, 0xa9, 0x45, 0x42, 0x16, 0x5c,
	0x2c, 0x20, 0xa6, 0x90, 0x98, 0x1e, 0x44, 0x83, 0x1e, 0x4c, 0x83, 0x9e, 0x2b, 0x48, 0x83, 0x14,
	0x0e, 0x71, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x88, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xbf,
	0xc6, 0x5f, 0x80, 0x00, 0x00, 0x00,
}
